=head1 NAME

Bing::Search - Interface to the Bing AJAX API

=head1 SYNOPSIS

   use L<Bing::Search;
   use feature qw(say);

   my $bing = L<Bing::Search->new( AppId => 'Whatevs' );
   
   my $web_source = L<Bing::Search::Source::Web->new;
   my $image_source = L<Bing::Search::Source::Image->new;

   $bing->add_source( $web ); # Search the "web"
   
   $image->setImage_Filter('Size:Small');

   $bing->add_source( $image ); # also, look for images

   $bing->query('rocks'); # show me "rocks"!

   $bing->search; # ROCKS!

   for my $result ($bing->results) {
      say $result->Url;  # http://.... 
   }

=head1 IMPORTANT

B<Read this!>

Microsoft requires all applications using their API 
to provide an AppId. The direct link (at the time of 
this writing) to create your own AppId 
is L<http://www.bing.com/developers/createapp.aspx>.

All requests without a valid, active AppId will be rejected
outright by Bing.  This module makes no attempt to authenticate
your AppId.

Finally, as a word of warning, the Terms of Use for the API are
very restrictive and you should ensure whatever you're going to 
be using it for falls withing the accepted use.

=head1 DESCRIPTION

This set of modules is designed to implement the Bing AJAX API.

The Bing search API, essentially, does some searching and returns some 
results.  The amount and type of results returned depend on which 
B<Sources> you request.  This particular system is fairly module, which
means future changes to the types of data, or even available sources,
is a near-trivial update.  

=head2 Usage

First, start by creating C<Bing::Search> object.  Supply your AppId here.

   my $bing = L<Bing::Search->new( AppId => 'Whatevs' );

Sometimes, especially when writing docs, you make a mistake.  It's ok, 
just make sure you get the right AppId in before sending it off.

    $bing->AppId('Whatever');

You're on your way to searching the internet!  But first, you must decide
what sort of things to search for.  You may search multiple types of data 
at once.  Create some C<Bing::Search::Source> objects.  

   my $web = L<Bing::Search::Source::Web->new();

Each Source has some basic attributes (documented later) and a few
have unique attributes and methds that you may want to adjust.  

    $web->Web_FileType('PDF');

Tell our search that we want to look for PDF documents on the web.

   $bing->add-source( $web );

Finally, we need to look for I<something>.  How about B<rocks>?  
Everyone loves rocks.

   $bing->Query('rocks');

Do it!  Go, go gadget intertubes!

   my $response = $bing->search();

Wait for it.  The intertubes are clogged with interstate lottery
tokens and free offers.  

You've got a couple options, here.  If you know exactly what you
expect, you can get a flattened list of all the results as a list
of hashrefs.

   my $result_list = $response->results();

This is also suitable for cases where you're working with 
attributes common to all of your C<Source>'s responses.  Like, C<Url>.

However, should you need a bit more granular control, or need each
type of result, C<Bing::Search> stole the verbiage ResultSet from 
DBIx::Class and uses that to contain the .. sets.. of results.

   my $sets = $response->result_sets();

Followed by,

   for my $set ( @$sets ) { 
      my $result_list = $set->results();
      # Do something with $result_list
   }

How hard could it be?!

=head1 SOURCES

Sources determine the search .. index?  To be searched.  A source will
also dictates what sort of results you get back.  Each Source has its own
documentation, and you are encouraged to consult that for the various 
attrbutes available.

Currently-implemented sources are:

=over 3

=item L<Bing::Search::Source::Image>

=item L<Bing::Search::Source::InstantAnswer>

=item L<Bing::Search::Source::MobileWeb>

=item L<Bing::Search::Source::News>

=item L<Bing::Search::Source::Phonebook>

=item L<Bing::Search::Source::RelatedSearch>

=item L<Bing::Search::Source::Spell>

=item L<Bing::Search::Source::Translation>

=item L<Bing::Search::Source::Video>

=item L<Bing::Search::Source::Web>

=back

Note the lack of the C<AdSource> Source.  Patches welcome.

=head1 RESULTS

Results come about in a seemingly complex way.  Gather 'round
and listen closely.  

The results of C<search()> is a C<Bing::Search::Response> object.  
This object has two methods you probably care about, C<results>
and C<result_sets>.  

C<results> gives you B<all results> in a big list.  

C<result_Sets> gives you a list of C<Bing::Search::ResultSet> 
objects, which contain your results, one object for each type of
response.  You probably never need to care about this.

As with sources, ResultSet objects share many common attributes,
however, you should consult the individual documentation for
each ResultSet for the details.

Currently supported result sets:

=over 3

=item bananaes

=item are

=item delicious

=back


=head1 SEE ALSO

=over 3

=item L<Google::Search> 

=item L<Yahoo::Search> 

=item L<WWW::Search> 

=item Bing Developer's Center L<http://www.bing.com/developers>

=cut

=head1 BUGS

=over 3

=item AdSource not implemented

The B<AdSource> Source is not implemented in this API, offically
because I am uncomfortable signing up to "monetize my AppId".  
Unoffically because I'm lazy and can't be bothered.  Patches
welcome.

=item Image and Video Filters lack custom size

The filters for "Height:I<number>" and "Width:I<number>" are
not currently implemented. 

=item The docs stink

They really do.

=back 


=head1 AUTHOR

Dave Houston L<dhouston@cpan.org>

=head1 COPYRIGHT

Copyright (C) 2010 Dave Houston.  All righs reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
